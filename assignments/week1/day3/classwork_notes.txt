01/04/2024

two sums

target
a +  b = target
b = target - a


target = 10

nums = [ 1, 2. 3, 1, 7]

is b in here?

10-1 = 9      9 is not in map1 so we add elemnt 1 into map1
10-2 = 8
10-3 = 7
10-1 = 9 alredy in map1
10-7 = 3   3 is already in map1

map1 = { 1:0, 2: 1, 3:2            }

map flips indice and element 


review of valid anagrams

def isAnagram(s,t):
    return sorted(s)==sorted(t)
    
    stored returns a sorted array
    so this brute force solution is not ideal

    => time complexity: O(nlogn + mlogm) where n is the size of s, where m is the size of t
    => space complexity: O(n) or O(1)  depends on sorted function implementation from python

efficent time complexity solution

def isAnagram(s,t):

    if len(s) != len(t)
        return False

    map_s, map_t = {}, {}

    # map_s is going to count the occurance of each character 
    # s=='rat'    map_s = {r:1, a:1, t:1}
    # t = 'caa'   map_t =={c:1, a:2}

    for i in range(len(s)):
        map_s[s[i]] = map_s.get(s[i], 0) + 1
        map_t[t[i]] = map_t.get(t[i], 0) + 1

        # this is saying lookup s[i] increase val by 1 otherwise create new key with val 1

    return map_s == map_t

    # time complexity: O(n) where n is the length of s
    # space complexity: O(2 x 26) => O(52) => O(1)
    # the max size of the maps are not dependent on size of input

